//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JLE.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class JLELexer : Lexer {
	public const int
		INT=1, STRING=2, LEFTPAR=3, RIGHTPAR=4, SEMICOLON=5, COMMA=6, NEWLINE=7, 
		WS=8;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INT", "STRING", "LEFTPAR", "RIGHTPAR", "SEMICOLON", "COMMA", "NEWLINE", 
		"WS"
	};


		public Compiler compiler = new Compiler();


	public JLELexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "'('", "')'", "';'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INT", "STRING", "LEFTPAR", "RIGHTPAR", "SEMICOLON", "COMMA", "NEWLINE", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JLE.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\n\x34");
		sb.Append("\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x3\x2\x5\x2\x15\n\x2\x3\x2\x6\x2");
		sb.Append("\x18\n\x2\r\x2\xE\x2\x19\x3\x3\x6\x3\x1D\n\x3\r\x3\xE\x3\x1E");
		sb.Append("\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x5\b*\n");
		sb.Append("\b\x3\b\x3\b\x3\t\x6\t/\n\t\r\t\xE\t\x30\x3\t\x3\t\x2\x2\n\x3");
		sb.Append("\x3\x5\x4\a\x5\t\x6\v\a\r\b\xF\t\x11\n\x3\x2\x4\x4\x2\x43\\");
		sb.Append("\x63|\x5\x2\v\f\xF\xF\"\"\x38\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2");
		sb.Append("\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2");
		sb.Append("\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x3\x14\x3");
		sb.Append("\x2\x2\x2\x5\x1C\x3\x2\x2\x2\a \x3\x2\x2\x2\t\"\x3\x2\x2\x2");
		sb.Append("\v$\x3\x2\x2\x2\r&\x3\x2\x2\x2\xF)\x3\x2\x2\x2\x11.\x3\x2\x2");
		sb.Append("\x2\x13\x15\a/\x2\x2\x14\x13\x3\x2\x2\x2\x14\x15\x3\x2\x2\x2");
		sb.Append("\x15\x17\x3\x2\x2\x2\x16\x18\x4\x32;\x2\x17\x16\x3\x2\x2\x2");
		sb.Append("\x18\x19\x3\x2\x2\x2\x19\x17\x3\x2\x2\x2\x19\x1A\x3\x2\x2\x2");
		sb.Append("\x1A\x4\x3\x2\x2\x2\x1B\x1D\t\x2\x2\x2\x1C\x1B\x3\x2\x2\x2\x1D");
		sb.Append("\x1E\x3\x2\x2\x2\x1E\x1C\x3\x2\x2\x2\x1E\x1F\x3\x2\x2\x2\x1F");
		sb.Append("\x6\x3\x2\x2\x2 !\a*\x2\x2!\b\x3\x2\x2\x2\"#\a+\x2\x2#\n\x3");
		sb.Append("\x2\x2\x2$%\a=\x2\x2%\f\x3\x2\x2\x2&\'\a.\x2\x2\'\xE\x3\x2\x2");
		sb.Append("\x2(*\a\xF\x2\x2)(\x3\x2\x2\x2)*\x3\x2\x2\x2*+\x3\x2\x2\x2+");
		sb.Append(",\a\f\x2\x2,\x10\x3\x2\x2\x2-/\t\x3\x2\x2.-\x3\x2\x2\x2/\x30");
		sb.Append("\x3\x2\x2\x2\x30.\x3\x2\x2\x2\x30\x31\x3\x2\x2\x2\x31\x32\x3");
		sb.Append("\x2\x2\x2\x32\x33\b\t\x2\x2\x33\x12\x3\x2\x2\x2\b\x2\x14\x19");
		sb.Append("\x1E)\x30\x3\b\x2\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
