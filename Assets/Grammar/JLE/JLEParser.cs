//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JLE.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class JLEParser : Parser {
	public const int
		INT=1, STRING=2, LEFTPAR=3, RIGHTPAR=4, LEFTSQ=5, RIGHTSQ=6, SEMICOLON=7, 
		COMMA=8, NEWLINE=9, WS=10;
	public const int
		RULE_start = 0, RULE_prog = 1, RULE_function = 2, RULE_function_use = 3, 
		RULE_function_declaration = 4, RULE_param_id_list = 5, RULE_param_decl_list = 6, 
		RULE_param_decl = 7, RULE_param_id = 8;
	public static readonly string[] ruleNames = {
		"start", "prog", "function", "function_use", "function_declaration", "param_id_list", 
		"param_decl_list", "param_decl", "param_id"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'('", "')'", "'{'", "'}'", "';'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INT", "STRING", "LEFTPAR", "RIGHTPAR", "LEFTSQ", "RIGHTSQ", "SEMICOLON", 
		"COMMA", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JLE.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }


		public Compiler compiler = new Compiler();

	public JLEParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartContext : ParserRuleContext {
		public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(JLEParser.Eof, 0); }
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJLEListener typedListener = listener as IJLEListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJLEListener typedListener = listener as IJLEListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18; prog();
			State = 19; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgContext : ParserRuleContext {
		public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(JLEParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(JLEParser.NEWLINE, i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJLEListener typedListener = listener as IJLEListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJLEListener typedListener = listener as IJLEListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 2, RULE_prog);
		try {
			int _alt;
			State = 31;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 24;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 21; function();
						State = 22; Match(NEWLINE);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 26;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 28; function();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 30; function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public IToken _SEMICOLON;
		public Function_useContext function_use() {
			return GetRuleContext<Function_useContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(JLEParser.SEMICOLON, 0); }
		public Function_declarationContext function_declaration() {
			return GetRuleContext<Function_declarationContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJLEListener typedListener = listener as IJLEListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJLEListener typedListener = listener as IJLEListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 4, RULE_function);
		int _la;
		try {
			State = 40;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 33; function_use();
				State = 35;
				_la = TokenStream.La(1);
				if (_la==SEMICOLON) {
					{
					State = 34; _localctx._SEMICOLON = Match(SEMICOLON);
					}
				}

				 compiler.FunctionManager.ErrorManager.checkLineEnding((_localctx._SEMICOLON!=null?_localctx._SEMICOLON.Text:null)); 
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 39; function_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_useContext : ParserRuleContext {
		public IToken identifier;
		public Param_id_listContext _param_id_list;
		public ITerminalNode LEFTPAR() { return GetToken(JLEParser.LEFTPAR, 0); }
		public ITerminalNode RIGHTPAR() { return GetToken(JLEParser.RIGHTPAR, 0); }
		public ITerminalNode STRING() { return GetToken(JLEParser.STRING, 0); }
		public Param_id_listContext param_id_list() {
			return GetRuleContext<Param_id_listContext>(0);
		}
		public Function_useContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_use; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJLEListener typedListener = listener as IJLEListener;
			if (typedListener != null) typedListener.EnterFunction_use(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJLEListener typedListener = listener as IJLEListener;
			if (typedListener != null) typedListener.ExitFunction_use(this);
		}
	}

	[RuleVersion(0)]
	public Function_useContext function_use() {
		Function_useContext _localctx = new Function_useContext(Context, State);
		EnterRule(_localctx, 6, RULE_function_use);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; _localctx.identifier = Match(STRING);
			 compiler.FunctionManager.addFunctionUse((_localctx.identifier!=null?_localctx.identifier.Text:null)); 
			State = 44; Match(LEFTPAR);
			State = 46;
			_la = TokenStream.La(1);
			if (_la==INT || _la==STRING) {
				{
				State = 45; _localctx._param_id_list = param_id_list();
				}
			}

			State = 48; Match(RIGHTPAR);
			compiler.FunctionManager.addCommand((_localctx.identifier!=null?_localctx.identifier.Text:null), (_localctx._param_id_list!=null?TokenStream.GetText(_localctx._param_id_list.Start,_localctx._param_id_list.Stop):null)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_declarationContext : ParserRuleContext {
		public IToken function_type;
		public IToken identifier;
		public Param_decl_listContext _param_decl_list;
		public ITerminalNode LEFTPAR() { return GetToken(JLEParser.LEFTPAR, 0); }
		public ITerminalNode RIGHTPAR() { return GetToken(JLEParser.RIGHTPAR, 0); }
		public ITerminalNode LEFTSQ() { return GetToken(JLEParser.LEFTSQ, 0); }
		public ITerminalNode RIGHTSQ() { return GetToken(JLEParser.RIGHTSQ, 0); }
		public ITerminalNode[] STRING() { return GetTokens(JLEParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(JLEParser.STRING, i);
		}
		public Param_decl_listContext param_decl_list() {
			return GetRuleContext<Param_decl_listContext>(0);
		}
		public Function_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJLEListener typedListener = listener as IJLEListener;
			if (typedListener != null) typedListener.EnterFunction_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJLEListener typedListener = listener as IJLEListener;
			if (typedListener != null) typedListener.ExitFunction_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Function_declarationContext function_declaration() {
		Function_declarationContext _localctx = new Function_declarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_function_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51; _localctx.function_type = Match(STRING);
			State = 52; _localctx.identifier = Match(STRING);
			compiler.FunctionManager.addDeclaredFunction((_localctx.identifier!=null?_localctx.identifier.Text:null)); 
			State = 54; Match(LEFTPAR);
			State = 56;
			_la = TokenStream.La(1);
			if (_la==STRING) {
				{
				State = 55; _localctx._param_decl_list = param_decl_list();
				}
			}

			State = 58; Match(RIGHTPAR);
			State = 59; Match(LEFTSQ);
			State = 60; Match(RIGHTSQ);
			compiler.FunctionManager.addNewFunction((_localctx.function_type!=null?_localctx.function_type.Text:null), (_localctx.identifier!=null?_localctx.identifier.Text:null), (_localctx._param_decl_list!=null?TokenStream.GetText(_localctx._param_decl_list.Start,_localctx._param_decl_list.Stop):null)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_id_listContext : ParserRuleContext {
		public Param_idContext[] param_id() {
			return GetRuleContexts<Param_idContext>();
		}
		public Param_idContext param_id(int i) {
			return GetRuleContext<Param_idContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(JLEParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JLEParser.COMMA, i);
		}
		public Param_id_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_id_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJLEListener typedListener = listener as IJLEListener;
			if (typedListener != null) typedListener.EnterParam_id_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJLEListener typedListener = listener as IJLEListener;
			if (typedListener != null) typedListener.ExitParam_id_list(this);
		}
	}

	[RuleVersion(0)]
	public Param_id_listContext param_id_list() {
		Param_id_listContext _localctx = new Param_id_listContext(Context, State);
		EnterRule(_localctx, 10, RULE_param_id_list);
		try {
			int _alt;
			State = 73;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 66;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 63; param_id();
						State = 64; Match(COMMA);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 68;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 70; param_id();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 72; param_id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_decl_listContext : ParserRuleContext {
		public Param_declContext[] param_decl() {
			return GetRuleContexts<Param_declContext>();
		}
		public Param_declContext param_decl(int i) {
			return GetRuleContext<Param_declContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(JLEParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JLEParser.COMMA, i);
		}
		public Param_decl_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_decl_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJLEListener typedListener = listener as IJLEListener;
			if (typedListener != null) typedListener.EnterParam_decl_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJLEListener typedListener = listener as IJLEListener;
			if (typedListener != null) typedListener.ExitParam_decl_list(this);
		}
	}

	[RuleVersion(0)]
	public Param_decl_listContext param_decl_list() {
		Param_decl_listContext _localctx = new Param_decl_listContext(Context, State);
		EnterRule(_localctx, 12, RULE_param_decl_list);
		try {
			int _alt;
			State = 85;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 78;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 75; param_decl();
						State = 76; Match(COMMA);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 80;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 82; param_decl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 84; param_decl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_declContext : ParserRuleContext {
		public IToken param_type;
		public IToken param_identifier;
		public ITerminalNode[] STRING() { return GetTokens(JLEParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(JLEParser.STRING, i);
		}
		public Param_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_decl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJLEListener typedListener = listener as IJLEListener;
			if (typedListener != null) typedListener.EnterParam_decl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJLEListener typedListener = listener as IJLEListener;
			if (typedListener != null) typedListener.ExitParam_decl(this);
		}
	}

	[RuleVersion(0)]
	public Param_declContext param_decl() {
		Param_declContext _localctx = new Param_declContext(Context, State);
		EnterRule(_localctx, 14, RULE_param_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87; _localctx.param_type = Match(STRING);
			State = 88; _localctx.param_identifier = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_idContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(JLEParser.STRING, 0); }
		public ITerminalNode INT() { return GetToken(JLEParser.INT, 0); }
		public Param_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJLEListener typedListener = listener as IJLEListener;
			if (typedListener != null) typedListener.EnterParam_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJLEListener typedListener = listener as IJLEListener;
			if (typedListener != null) typedListener.ExitParam_id(this);
		}
	}

	[RuleVersion(0)]
	public Param_idContext param_id() {
		Param_idContext _localctx = new Param_idContext(Context, State);
		EnterRule(_localctx, 16, RULE_param_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			_la = TokenStream.La(1);
			if ( !(_la==INT || _la==STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\f_");
		sb.Append("\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a");
		sb.Append("\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3");
		sb.Append("\x3\x3\x6\x3\x1B\n\x3\r\x3\xE\x3\x1C\x3\x3\x3\x3\x3\x3\x5\x3");
		sb.Append("\"\n\x3\x3\x4\x3\x4\x5\x4&\n\x4\x3\x4\x3\x4\x3\x4\x5\x4+\n\x4");
		sb.Append("\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\x31\n\x5\x3\x5\x3\x5\x3\x5\x3");
		sb.Append("\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6;\n\x6\x3\x6\x3\x6\x3\x6\x3");
		sb.Append("\x6\x3\x6\x3\a\x3\a\x3\a\x6\a\x45\n\a\r\a\xE\a\x46\x3\a\x3\a");
		sb.Append("\x3\a\x5\aL\n\a\x3\b\x3\b\x3\b\x6\bQ\n\b\r\b\xE\bR\x3\b\x3\b");
		sb.Append("\x3\b\x5\bX\n\b\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x2\x2\v\x2\x4");
		sb.Append("\x6\b\n\f\xE\x10\x12\x2\x3\x3\x2\x3\x4_\x2\x14\x3\x2\x2\x2\x4");
		sb.Append("!\x3\x2\x2\x2\x6*\x3\x2\x2\x2\b,\x3\x2\x2\x2\n\x35\x3\x2\x2");
		sb.Append("\x2\fK\x3\x2\x2\x2\xEW\x3\x2\x2\x2\x10Y\x3\x2\x2\x2\x12\\\x3");
		sb.Append("\x2\x2\x2\x14\x15\x5\x4\x3\x2\x15\x16\a\x2\x2\x3\x16\x3\x3\x2");
		sb.Append("\x2\x2\x17\x18\x5\x6\x4\x2\x18\x19\a\v\x2\x2\x19\x1B\x3\x2\x2");
		sb.Append("\x2\x1A\x17\x3\x2\x2\x2\x1B\x1C\x3\x2\x2\x2\x1C\x1A\x3\x2\x2");
		sb.Append("\x2\x1C\x1D\x3\x2\x2\x2\x1D\x1E\x3\x2\x2\x2\x1E\x1F\x5\x6\x4");
		sb.Append("\x2\x1F\"\x3\x2\x2\x2 \"\x5\x6\x4\x2!\x1A\x3\x2\x2\x2! \x3\x2");
		sb.Append("\x2\x2\"\x5\x3\x2\x2\x2#%\x5\b\x5\x2$&\a\t\x2\x2%$\x3\x2\x2");
		sb.Append("\x2%&\x3\x2\x2\x2&\'\x3\x2\x2\x2\'(\b\x4\x1\x2(+\x3\x2\x2\x2");
		sb.Append(")+\x5\n\x6\x2*#\x3\x2\x2\x2*)\x3\x2\x2\x2+\a\x3\x2\x2\x2,-\a");
		sb.Append("\x4\x2\x2-.\b\x5\x1\x2.\x30\a\x5\x2\x2/\x31\x5\f\a\x2\x30/\x3");
		sb.Append("\x2\x2\x2\x30\x31\x3\x2\x2\x2\x31\x32\x3\x2\x2\x2\x32\x33\a");
		sb.Append("\x6\x2\x2\x33\x34\b\x5\x1\x2\x34\t\x3\x2\x2\x2\x35\x36\a\x4");
		sb.Append("\x2\x2\x36\x37\a\x4\x2\x2\x37\x38\b\x6\x1\x2\x38:\a\x5\x2\x2");
		sb.Append("\x39;\x5\xE\b\x2:\x39\x3\x2\x2\x2:;\x3\x2\x2\x2;<\x3\x2\x2\x2");
		sb.Append("<=\a\x6\x2\x2=>\a\a\x2\x2>?\a\b\x2\x2?@\b\x6\x1\x2@\v\x3\x2");
		sb.Append("\x2\x2\x41\x42\x5\x12\n\x2\x42\x43\a\n\x2\x2\x43\x45\x3\x2\x2");
		sb.Append("\x2\x44\x41\x3\x2\x2\x2\x45\x46\x3\x2\x2\x2\x46\x44\x3\x2\x2");
		sb.Append("\x2\x46G\x3\x2\x2\x2GH\x3\x2\x2\x2HI\x5\x12\n\x2IL\x3\x2\x2");
		sb.Append("\x2JL\x5\x12\n\x2K\x44\x3\x2\x2\x2KJ\x3\x2\x2\x2L\r\x3\x2\x2");
		sb.Append("\x2MN\x5\x10\t\x2NO\a\n\x2\x2OQ\x3\x2\x2\x2PM\x3\x2\x2\x2QR");
		sb.Append("\x3\x2\x2\x2RP\x3\x2\x2\x2RS\x3\x2\x2\x2ST\x3\x2\x2\x2TU\x5");
		sb.Append("\x10\t\x2UX\x3\x2\x2\x2VX\x5\x10\t\x2WP\x3\x2\x2\x2WV\x3\x2");
		sb.Append("\x2\x2X\xF\x3\x2\x2\x2YZ\a\x4\x2\x2Z[\a\x4\x2\x2[\x11\x3\x2");
		sb.Append("\x2\x2\\]\t\x2\x2\x2]\x13\x3\x2\x2\x2\f\x1C!%*\x30:\x46KRW");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
