//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JLE.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class JLEParser : Parser {
	public const int
		INT=1, STRING=2, LEFTPAR=3, RIGHTPAR=4, SEMICOLON=5, COMMA=6, NEWLINE=7, 
		WS=8;
	public const int
		RULE_start = 0, RULE_prog = 1, RULE_cmd = 2, RULE_func = 3, RULE_args = 4, 
		RULE_arg = 5;
	public static readonly string[] ruleNames = {
		"start", "prog", "cmd", "func", "args", "arg"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'('", "')'", "';'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INT", "STRING", "LEFTPAR", "RIGHTPAR", "SEMICOLON", "COMMA", "NEWLINE", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JLE.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }


		public Compiler compiler = new Compiler();

	public JLEParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartContext : ParserRuleContext {
		public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(JLEParser.Eof, 0); }
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJLEListener typedListener = listener as IJLEListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJLEListener typedListener = listener as IJLEListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12; prog();
			State = 13; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgContext : ParserRuleContext {
		public CmdContext[] cmd() {
			return GetRuleContexts<CmdContext>();
		}
		public CmdContext cmd(int i) {
			return GetRuleContext<CmdContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(JLEParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(JLEParser.NEWLINE, i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJLEListener typedListener = listener as IJLEListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJLEListener typedListener = listener as IJLEListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 2, RULE_prog);
		try {
			int _alt;
			State = 25;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 18;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 15; cmd();
						State = 16; Match(NEWLINE);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 20;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 22; cmd();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 24; cmd();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CmdContext : ParserRuleContext {
		public IToken _SEMICOLON;
		public FuncContext func() {
			return GetRuleContext<FuncContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(JLEParser.SEMICOLON, 0); }
		public CmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJLEListener typedListener = listener as IJLEListener;
			if (typedListener != null) typedListener.EnterCmd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJLEListener typedListener = listener as IJLEListener;
			if (typedListener != null) typedListener.ExitCmd(this);
		}
	}

	[RuleVersion(0)]
	public CmdContext cmd() {
		CmdContext _localctx = new CmdContext(Context, State);
		EnterRule(_localctx, 4, RULE_cmd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27; func();
			State = 29;
			_la = TokenStream.La(1);
			if (_la==SEMICOLON) {
				{
				State = 28; _localctx._SEMICOLON = Match(SEMICOLON);
				}
			}

			 compiler.FunctionManager.ErrorManager.checkLineEnding((_localctx._SEMICOLON!=null?_localctx._SEMICOLON.Text:null)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncContext : ParserRuleContext {
		public IToken func_name;
		public ArgsContext _args;
		public ITerminalNode LEFTPAR() { return GetToken(JLEParser.LEFTPAR, 0); }
		public ITerminalNode RIGHTPAR() { return GetToken(JLEParser.RIGHTPAR, 0); }
		public ITerminalNode STRING() { return GetToken(JLEParser.STRING, 0); }
		public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public FuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJLEListener typedListener = listener as IJLEListener;
			if (typedListener != null) typedListener.EnterFunc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJLEListener typedListener = listener as IJLEListener;
			if (typedListener != null) typedListener.ExitFunc(this);
		}
	}

	[RuleVersion(0)]
	public FuncContext func() {
		FuncContext _localctx = new FuncContext(Context, State);
		EnterRule(_localctx, 6, RULE_func);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33; _localctx.func_name = Match(STRING);
			 compiler.FunctionManager.addFunctionName((_localctx.func_name!=null?_localctx.func_name.Text:null)); 
			State = 35; Match(LEFTPAR);
			State = 37;
			_la = TokenStream.La(1);
			if (_la==INT || _la==STRING) {
				{
				State = 36; _localctx._args = args();
				}
			}

			State = 39; Match(RIGHTPAR);
			 compiler.FunctionManager.addGenericCommand((_localctx.func_name!=null?_localctx.func_name.Text:null), (_localctx._args!=null?TokenStream.GetText(_localctx._args.Start,_localctx._args.Stop):null)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		public ArgContext[] arg() {
			return GetRuleContexts<ArgContext>();
		}
		public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(JLEParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JLEParser.COMMA, i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJLEListener typedListener = listener as IJLEListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJLEListener typedListener = listener as IJLEListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 8, RULE_args);
		try {
			int _alt;
			State = 52;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 45;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 42; arg();
						State = 43; Match(COMMA);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 47;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 49; arg();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 51; arg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(JLEParser.STRING, 0); }
		public ITerminalNode INT() { return GetToken(JLEParser.INT, 0); }
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJLEListener typedListener = listener as IJLEListener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJLEListener typedListener = listener as IJLEListener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(Context, State);
		EnterRule(_localctx, 10, RULE_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			_la = TokenStream.La(1);
			if ( !(_la==INT || _la==STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\n;");
		sb.Append("\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a");
		sb.Append("\t\a\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x6\x3\x15\n\x3\r\x3");
		sb.Append("\xE\x3\x16\x3\x3\x3\x3\x3\x3\x5\x3\x1C\n\x3\x3\x4\x3\x4\x5\x4");
		sb.Append(" \n\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5(\n\x5\x3\x5");
		sb.Append("\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x6\x6\x30\n\x6\r\x6\xE\x6\x31");
		sb.Append("\x3\x6\x3\x6\x3\x6\x5\x6\x37\n\x6\x3\a\x3\a\x3\a\x2\x2\b\x2");
		sb.Append("\x4\x6\b\n\f\x2\x3\x3\x2\x3\x4:\x2\xE\x3\x2\x2\x2\x4\x1B\x3");
		sb.Append("\x2\x2\x2\x6\x1D\x3\x2\x2\x2\b#\x3\x2\x2\x2\n\x36\x3\x2\x2\x2");
		sb.Append("\f\x38\x3\x2\x2\x2\xE\xF\x5\x4\x3\x2\xF\x10\a\x2\x2\x3\x10\x3");
		sb.Append("\x3\x2\x2\x2\x11\x12\x5\x6\x4\x2\x12\x13\a\t\x2\x2\x13\x15\x3");
		sb.Append("\x2\x2\x2\x14\x11\x3\x2\x2\x2\x15\x16\x3\x2\x2\x2\x16\x14\x3");
		sb.Append("\x2\x2\x2\x16\x17\x3\x2\x2\x2\x17\x18\x3\x2\x2\x2\x18\x19\x5");
		sb.Append("\x6\x4\x2\x19\x1C\x3\x2\x2\x2\x1A\x1C\x5\x6\x4\x2\x1B\x14\x3");
		sb.Append("\x2\x2\x2\x1B\x1A\x3\x2\x2\x2\x1C\x5\x3\x2\x2\x2\x1D\x1F\x5");
		sb.Append("\b\x5\x2\x1E \a\a\x2\x2\x1F\x1E\x3\x2\x2\x2\x1F \x3\x2\x2\x2");
		sb.Append(" !\x3\x2\x2\x2!\"\b\x4\x1\x2\"\a\x3\x2\x2\x2#$\a\x4\x2\x2$%");
		sb.Append("\b\x5\x1\x2%\'\a\x5\x2\x2&(\x5\n\x6\x2\'&\x3\x2\x2\x2\'(\x3");
		sb.Append("\x2\x2\x2()\x3\x2\x2\x2)*\a\x6\x2\x2*+\b\x5\x1\x2+\t\x3\x2\x2");
		sb.Append("\x2,-\x5\f\a\x2-.\a\b\x2\x2.\x30\x3\x2\x2\x2/,\x3\x2\x2\x2\x30");
		sb.Append("\x31\x3\x2\x2\x2\x31/\x3\x2\x2\x2\x31\x32\x3\x2\x2\x2\x32\x33");
		sb.Append("\x3\x2\x2\x2\x33\x34\x5\f\a\x2\x34\x37\x3\x2\x2\x2\x35\x37\x5");
		sb.Append("\f\a\x2\x36/\x3\x2\x2\x2\x36\x35\x3\x2\x2\x2\x37\v\x3\x2\x2");
		sb.Append("\x2\x38\x39\t\x2\x2\x2\x39\r\x3\x2\x2\x2\b\x16\x1B\x1F\'\x31");
		sb.Append("\x36");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
