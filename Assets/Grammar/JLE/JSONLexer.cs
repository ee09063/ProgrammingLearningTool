//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JSON.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class JSONLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, INT=4, STRING=5, LEFTPAR=6, RIGHTPAR=7, LEFTSQ=8, 
		RIGHTSQ=9, SEMICOLON=10, COMMA=11, LESSERTHAN=12, GREATERTHAN=13, PLUS=14, 
		MINUS=15, WS=16;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "INT", "STRING", "LEFTPAR", "RIGHTPAR", "LEFTSQ", 
		"RIGHTSQ", "SEMICOLON", "COMMA", "LESSERTHAN", "GREATERTHAN", "PLUS", 
		"MINUS", "WS"
	};


		public Compiler compiler = new Compiler();


	public JSONLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'for'", "'int'", "'='", null, null, "'('", "')'", "'{'", "'}'", 
		"';'", "','", "'<'", "'>'", "'+'", "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "INT", "STRING", "LEFTPAR", "RIGHTPAR", "LEFTSQ", 
		"RIGHTSQ", "SEMICOLON", "COMMA", "LESSERTHAN", "GREATERTHAN", "PLUS", 
		"MINUS", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JSON.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\x12");
		sb.Append("U\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x3\x2\x3");
		sb.Append("\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x5");
		sb.Append("\x5/\n\x5\x3\x5\x6\x5\x32\n\x5\r\x5\xE\x5\x33\x3\x6\x6\x6\x37");
		sb.Append("\n\x6\r\x6\xE\x6\x38\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n");
		sb.Append("\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10");
		sb.Append("\x3\x10\x3\x11\x6\x11P\n\x11\r\x11\xE\x11Q\x3\x11\x3\x11\x2");
		sb.Append("\x2\x12\x3\x3\x5\x4\a\x5\t\x6\v\a\r\b\xF\t\x11\n\x13\v\x15\f");
		sb.Append("\x17\r\x19\xE\x1B\xF\x1D\x10\x1F\x11!\x12\x3\x2\x4\x5\x2\x43");
		sb.Append("\\\x61\x61\x63|\x5\x2\v\f\xF\xF\"\"X\x2\x3\x3\x2\x2\x2\x2\x5");
		sb.Append("\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2");
		sb.Append("\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2");
		sb.Append("\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19");
		sb.Append("\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3");
		sb.Append("\x2\x2\x2\x2!\x3\x2\x2\x2\x3#\x3\x2\x2\x2\x5\'\x3\x2\x2\x2\a");
		sb.Append("+\x3\x2\x2\x2\t.\x3\x2\x2\x2\v\x36\x3\x2\x2\x2\r:\x3\x2\x2\x2");
		sb.Append("\xF<\x3\x2\x2\x2\x11>\x3\x2\x2\x2\x13@\x3\x2\x2\x2\x15\x42\x3");
		sb.Append("\x2\x2\x2\x17\x44\x3\x2\x2\x2\x19\x46\x3\x2\x2\x2\x1BH\x3\x2");
		sb.Append("\x2\x2\x1DJ\x3\x2\x2\x2\x1FL\x3\x2\x2\x2!O\x3\x2\x2\x2#$\ah");
		sb.Append("\x2\x2$%\aq\x2\x2%&\at\x2\x2&\x4\x3\x2\x2\x2\'(\ak\x2\x2()\a");
		sb.Append("p\x2\x2)*\av\x2\x2*\x6\x3\x2\x2\x2+,\a?\x2\x2,\b\x3\x2\x2\x2");
		sb.Append("-/\a/\x2\x2.-\x3\x2\x2\x2./\x3\x2\x2\x2/\x31\x3\x2\x2\x2\x30");
		sb.Append("\x32\x4\x32;\x2\x31\x30\x3\x2\x2\x2\x32\x33\x3\x2\x2\x2\x33");
		sb.Append("\x31\x3\x2\x2\x2\x33\x34\x3\x2\x2\x2\x34\n\x3\x2\x2\x2\x35\x37");
		sb.Append("\t\x2\x2\x2\x36\x35\x3\x2\x2\x2\x37\x38\x3\x2\x2\x2\x38\x36");
		sb.Append("\x3\x2\x2\x2\x38\x39\x3\x2\x2\x2\x39\f\x3\x2\x2\x2:;\a*\x2\x2");
		sb.Append(";\xE\x3\x2\x2\x2<=\a+\x2\x2=\x10\x3\x2\x2\x2>?\a}\x2\x2?\x12");
		sb.Append("\x3\x2\x2\x2@\x41\a\x7F\x2\x2\x41\x14\x3\x2\x2\x2\x42\x43\a");
		sb.Append("=\x2\x2\x43\x16\x3\x2\x2\x2\x44\x45\a.\x2\x2\x45\x18\x3\x2\x2");
		sb.Append("\x2\x46G\a>\x2\x2G\x1A\x3\x2\x2\x2HI\a@\x2\x2I\x1C\x3\x2\x2");
		sb.Append("\x2JK\a-\x2\x2K\x1E\x3\x2\x2\x2LM\a/\x2\x2M \x3\x2\x2\x2NP\t");
		sb.Append("\x3\x2\x2ON\x3\x2\x2\x2PQ\x3\x2\x2\x2QO\x3\x2\x2\x2QR\x3\x2");
		sb.Append("\x2\x2RS\x3\x2\x2\x2ST\b\x11\x2\x2T\"\x3\x2\x2\x2\a\x2.\x33");
		sb.Append("\x38Q\x3\b\x2\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
