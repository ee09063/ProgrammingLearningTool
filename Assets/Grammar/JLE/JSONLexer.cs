//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JSON.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class JSONLexer : Lexer {
	public const int
		INT=1, STRING=2, LEFTPAR=3, RIGHTPAR=4, LEFTSQ=5, RIGHTSQ=6, SEMICOLON=7, 
		COMMA=8, WS=9;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INT", "STRING", "LEFTPAR", "RIGHTPAR", "LEFTSQ", "RIGHTSQ", "SEMICOLON", 
		"COMMA", "WS"
	};


		public Compiler compiler = new Compiler();


	public JSONLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "'('", "')'", "'{'", "'}'", "';'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INT", "STRING", "LEFTPAR", "RIGHTPAR", "LEFTSQ", "RIGHTSQ", "SEMICOLON", 
		"COMMA", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JSON.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\v\x35");
		sb.Append("\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x3\x2\x5\x2\x17\n\x2\x3");
		sb.Append("\x2\x6\x2\x1A\n\x2\r\x2\xE\x2\x1B\x3\x3\x6\x3\x1F\n\x3\r\x3");
		sb.Append("\xE\x3 \x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3");
		sb.Append("\b\x3\t\x3\t\x3\n\x6\n\x30\n\n\r\n\xE\n\x31\x3\n\x3\n\x2\x2");
		sb.Append("\v\x3\x3\x5\x4\a\x5\t\x6\v\a\r\b\xF\t\x11\n\x13\v\x3\x2\x4\x5");
		sb.Append("\x2\x43\\\x61\x61\x63|\x5\x2\v\f\xF\xF\"\"\x38\x2\x3\x3\x2\x2");
		sb.Append("\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v");
		sb.Append("\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2");
		sb.Append("\x2\x2\x2\x13\x3\x2\x2\x2\x3\x16\x3\x2\x2\x2\x5\x1E\x3\x2\x2");
		sb.Append("\x2\a\"\x3\x2\x2\x2\t$\x3\x2\x2\x2\v&\x3\x2\x2\x2\r(\x3\x2\x2");
		sb.Append("\x2\xF*\x3\x2\x2\x2\x11,\x3\x2\x2\x2\x13/\x3\x2\x2\x2\x15\x17");
		sb.Append("\a/\x2\x2\x16\x15\x3\x2\x2\x2\x16\x17\x3\x2\x2\x2\x17\x19\x3");
		sb.Append("\x2\x2\x2\x18\x1A\x4\x32;\x2\x19\x18\x3\x2\x2\x2\x1A\x1B\x3");
		sb.Append("\x2\x2\x2\x1B\x19\x3\x2\x2\x2\x1B\x1C\x3\x2\x2\x2\x1C\x4\x3");
		sb.Append("\x2\x2\x2\x1D\x1F\t\x2\x2\x2\x1E\x1D\x3\x2\x2\x2\x1F \x3\x2");
		sb.Append("\x2\x2 \x1E\x3\x2\x2\x2 !\x3\x2\x2\x2!\x6\x3\x2\x2\x2\"#\a*");
		sb.Append("\x2\x2#\b\x3\x2\x2\x2$%\a+\x2\x2%\n\x3\x2\x2\x2&\'\a}\x2\x2");
		sb.Append("\'\f\x3\x2\x2\x2()\a\x7F\x2\x2)\xE\x3\x2\x2\x2*+\a=\x2\x2+\x10");
		sb.Append("\x3\x2\x2\x2,-\a.\x2\x2-\x12\x3\x2\x2\x2.\x30\t\x3\x2\x2/.\x3");
		sb.Append("\x2\x2\x2\x30\x31\x3\x2\x2\x2\x31/\x3\x2\x2\x2\x31\x32\x3\x2");
		sb.Append("\x2\x2\x32\x33\x3\x2\x2\x2\x33\x34\b\n\x2\x2\x34\x14\x3\x2\x2");
		sb.Append("\x2\a\x2\x16\x1B \x31\x3\b\x2\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
