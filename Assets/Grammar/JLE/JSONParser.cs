//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JSON.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class JSONParser : Parser {
	public const int
		INT=1, STRING=2, LEFTPAR=3, RIGHTPAR=4, LEFTSQ=5, RIGHTSQ=6, SEMICOLON=7, 
		COMMA=8, NEWLINE=9, WS=10;
	public const int
		RULE_start = 0, RULE_prog = 1, RULE_function = 2, RULE_function_use = 3, 
		RULE_function_inside_function = 4, RULE_function_declaration = 5, RULE_param_id_list = 6, 
		RULE_param_decl_list = 7, RULE_param_decl = 8, RULE_param_id = 9, RULE_statement_list = 10, 
		RULE_statement = 11;
	public static readonly string[] ruleNames = {
		"start", "prog", "function", "function_use", "function_inside_function", 
		"function_declaration", "param_id_list", "param_decl_list", "param_decl", 
		"param_id", "statement_list", "statement"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'('", "')'", "'{'", "'}'", "';'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INT", "STRING", "LEFTPAR", "RIGHTPAR", "LEFTSQ", "RIGHTSQ", "SEMICOLON", 
		"COMMA", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JSON.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }


		public Compiler compiler = new Compiler();

	public JSONParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartContext : ParserRuleContext {
		public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(JSONParser.Eof, 0); }
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24; prog();
			State = 25; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgContext : ParserRuleContext {
		public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 2, RULE_prog);
		try {
			int _alt;
			State = 35;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 28;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 27; function();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 30;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 32; function();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 34; function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public Function_useContext function_use() {
			return GetRuleContext<Function_useContext>(0);
		}
		public Function_declarationContext function_declaration() {
			return GetRuleContext<Function_declarationContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 4, RULE_function);
		try {
			State = 39;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 37; function_use();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 38; function_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_useContext : ParserRuleContext {
		public IToken identifier;
		public Param_id_listContext _param_id_list;
		public IToken _SEMICOLON;
		public ITerminalNode LEFTPAR() { return GetToken(JSONParser.LEFTPAR, 0); }
		public ITerminalNode RIGHTPAR() { return GetToken(JSONParser.RIGHTPAR, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(JSONParser.SEMICOLON, 0); }
		public ITerminalNode STRING() { return GetToken(JSONParser.STRING, 0); }
		public Param_id_listContext param_id_list() {
			return GetRuleContext<Param_id_listContext>(0);
		}
		public Function_useContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_use; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterFunction_use(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitFunction_use(this);
		}
	}

	[RuleVersion(0)]
	public Function_useContext function_use() {
		Function_useContext _localctx = new Function_useContext(Context, State);
		EnterRule(_localctx, 6, RULE_function_use);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41; _localctx.identifier = Match(STRING);
			 compiler.FunctionManager.addFunctionUse((_localctx.identifier!=null?_localctx.identifier.Text:null)); 
			State = 43; Match(LEFTPAR);
			State = 45;
			_la = TokenStream.La(1);
			if (_la==INT || _la==STRING) {
				{
				State = 44; _localctx._param_id_list = param_id_list();
				}
			}

			State = 47; Match(RIGHTPAR);
			compiler.FunctionManager.addCommand((_localctx.identifier!=null?_localctx.identifier.Text:null), (_localctx._param_id_list!=null?TokenStream.GetText(_localctx._param_id_list.Start,_localctx._param_id_list.Stop):null), false); 
			State = 49; _localctx._SEMICOLON = Match(SEMICOLON);
			 compiler.FunctionManager.ErrorManager.checkLineEnding((_localctx._SEMICOLON!=null?_localctx._SEMICOLON.Text:null)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_inside_functionContext : ParserRuleContext {
		public IToken identifier;
		public Param_id_listContext _param_id_list;
		public IToken _SEMICOLON;
		public ITerminalNode LEFTPAR() { return GetToken(JSONParser.LEFTPAR, 0); }
		public ITerminalNode RIGHTPAR() { return GetToken(JSONParser.RIGHTPAR, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(JSONParser.SEMICOLON, 0); }
		public ITerminalNode STRING() { return GetToken(JSONParser.STRING, 0); }
		public Param_id_listContext param_id_list() {
			return GetRuleContext<Param_id_listContext>(0);
		}
		public Function_inside_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_inside_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterFunction_inside_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitFunction_inside_function(this);
		}
	}

	[RuleVersion(0)]
	public Function_inside_functionContext function_inside_function() {
		Function_inside_functionContext _localctx = new Function_inside_functionContext(Context, State);
		EnterRule(_localctx, 8, RULE_function_inside_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; _localctx.identifier = Match(STRING);
			State = 53; Match(LEFTPAR);
			State = 55;
			_la = TokenStream.La(1);
			if (_la==INT || _la==STRING) {
				{
				State = 54; _localctx._param_id_list = param_id_list();
				}
			}

			State = 57; Match(RIGHTPAR);
			compiler.FunctionManager.addCommand((_localctx.identifier!=null?_localctx.identifier.Text:null), (_localctx._param_id_list!=null?TokenStream.GetText(_localctx._param_id_list.Start,_localctx._param_id_list.Stop):null), true); 
			State = 59; _localctx._SEMICOLON = Match(SEMICOLON);
			 compiler.FunctionManager.ErrorManager.checkLineEnding((_localctx._SEMICOLON!=null?_localctx._SEMICOLON.Text:null)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_declarationContext : ParserRuleContext {
		public IToken function_type;
		public IToken identifier;
		public ITerminalNode LEFTPAR() { return GetToken(JSONParser.LEFTPAR, 0); }
		public ITerminalNode RIGHTPAR() { return GetToken(JSONParser.RIGHTPAR, 0); }
		public ITerminalNode LEFTSQ() { return GetToken(JSONParser.LEFTSQ, 0); }
		public ITerminalNode RIGHTSQ() { return GetToken(JSONParser.RIGHTSQ, 0); }
		public ITerminalNode[] STRING() { return GetTokens(JSONParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(JSONParser.STRING, i);
		}
		public Param_decl_listContext param_decl_list() {
			return GetRuleContext<Param_decl_listContext>(0);
		}
		public Function_inside_functionContext[] function_inside_function() {
			return GetRuleContexts<Function_inside_functionContext>();
		}
		public Function_inside_functionContext function_inside_function(int i) {
			return GetRuleContext<Function_inside_functionContext>(i);
		}
		public Function_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterFunction_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitFunction_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Function_declarationContext function_declaration() {
		Function_declarationContext _localctx = new Function_declarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_function_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; _localctx.function_type = Match(STRING);
			State = 63; _localctx.identifier = Match(STRING);
			compiler.FunctionManager.addDeclaredFunction((_localctx.function_type!=null?_localctx.function_type.Text:null), (_localctx.identifier!=null?_localctx.identifier.Text:null)); 
			State = 65; Match(LEFTPAR);
			State = 67;
			_la = TokenStream.La(1);
			if (_la==STRING) {
				{
				State = 66; param_decl_list();
				}
			}

			State = 69; Match(RIGHTPAR);
			State = 70; Match(LEFTSQ);
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==STRING) {
				{
				{
				State = 71; function_inside_function();
				}
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 77; Match(RIGHTSQ);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_id_listContext : ParserRuleContext {
		public Param_idContext[] param_id() {
			return GetRuleContexts<Param_idContext>();
		}
		public Param_idContext param_id(int i) {
			return GetRuleContext<Param_idContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(JSONParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JSONParser.COMMA, i);
		}
		public Param_id_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_id_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterParam_id_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitParam_id_list(this);
		}
	}

	[RuleVersion(0)]
	public Param_id_listContext param_id_list() {
		Param_id_listContext _localctx = new Param_id_listContext(Context, State);
		EnterRule(_localctx, 12, RULE_param_id_list);
		try {
			int _alt;
			State = 89;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 82;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 79; param_id();
						State = 80; Match(COMMA);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 84;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 86; param_id();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 88; param_id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_decl_listContext : ParserRuleContext {
		public Param_declContext[] param_decl() {
			return GetRuleContexts<Param_declContext>();
		}
		public Param_declContext param_decl(int i) {
			return GetRuleContext<Param_declContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(JSONParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JSONParser.COMMA, i);
		}
		public Param_decl_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_decl_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterParam_decl_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitParam_decl_list(this);
		}
	}

	[RuleVersion(0)]
	public Param_decl_listContext param_decl_list() {
		Param_decl_listContext _localctx = new Param_decl_listContext(Context, State);
		EnterRule(_localctx, 14, RULE_param_decl_list);
		try {
			int _alt;
			State = 101;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 94;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 91; param_decl();
						State = 92; Match(COMMA);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 96;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 98; param_decl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 100; param_decl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_declContext : ParserRuleContext {
		public IToken param_type;
		public IToken param_identifier;
		public ITerminalNode[] STRING() { return GetTokens(JSONParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(JSONParser.STRING, i);
		}
		public Param_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_decl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterParam_decl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitParam_decl(this);
		}
	}

	[RuleVersion(0)]
	public Param_declContext param_decl() {
		Param_declContext _localctx = new Param_declContext(Context, State);
		EnterRule(_localctx, 16, RULE_param_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103; _localctx.param_type = Match(STRING);
			State = 104; _localctx.param_identifier = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_idContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(JSONParser.STRING, 0); }
		public ITerminalNode INT() { return GetToken(JSONParser.INT, 0); }
		public Param_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterParam_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitParam_id(this);
		}
	}

	[RuleVersion(0)]
	public Param_idContext param_id() {
		Param_idContext _localctx = new Param_idContext(Context, State);
		EnterRule(_localctx, 18, RULE_param_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			_la = TokenStream.La(1);
			if ( !(_la==INT || _la==STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterStatement_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitStatement_list(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		return statement_list(0);
	}

	private Statement_listContext statement_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Statement_listContext _localctx = new Statement_listContext(Context, _parentState);
		Statement_listContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_statement_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 113;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Statement_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_statement_list);
					State = 109;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 110; statement();
					}
					} 
				}
				State = 115;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public Function_useContext function_use() {
			return GetRuleContext<Function_useContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJSONListener typedListener = listener as IJSONListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; function_use();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return statement_list_sempred((Statement_listContext)_localctx, predIndex);
		}
		return true;
	}
	private bool statement_list_sempred(Statement_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\fy");
		sb.Append("\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a");
		sb.Append("\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x3");
		sb.Append("\x2\x3\x2\x3\x2\x3\x3\x6\x3\x1F\n\x3\r\x3\xE\x3 \x3\x3\x3\x3");
		sb.Append("\x3\x3\x5\x3&\n\x3\x3\x4\x3\x4\x5\x4*\n\x4\x3\x5\x3\x5\x3\x5");
		sb.Append("\x3\x5\x5\x5\x30\n\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3");
		sb.Append("\x6\x3\x6\x5\x6:\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3");
		sb.Append("\a\x3\a\x3\a\x3\a\x5\a\x46\n\a\x3\a\x3\a\x3\a\a\aK\n\a\f\a\xE");
		sb.Append("\aN\v\a\x3\a\x3\a\x3\b\x3\b\x3\b\x6\bU\n\b\r\b\xE\bV\x3\b\x3");
		sb.Append("\b\x3\b\x5\b\\\n\b\x3\t\x3\t\x3\t\x6\t\x61\n\t\r\t\xE\t\x62");
		sb.Append("\x3\t\x3\t\x3\t\x5\th\n\t\x3\n\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f");
		sb.Append("\x3\f\a\fr\n\f\f\f\xE\fu\v\f\x3\r\x3\r\x3\r\x2\x3\x16\xE\x2");
		sb.Append("\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x2\x3\x3\x2\x3\x4x\x2\x1A");
		sb.Append("\x3\x2\x2\x2\x4%\x3\x2\x2\x2\x6)\x3\x2\x2\x2\b+\x3\x2\x2\x2");
		sb.Append("\n\x36\x3\x2\x2\x2\f@\x3\x2\x2\x2\xE[\x3\x2\x2\x2\x10g\x3\x2");
		sb.Append("\x2\x2\x12i\x3\x2\x2\x2\x14l\x3\x2\x2\x2\x16n\x3\x2\x2\x2\x18");
		sb.Append("v\x3\x2\x2\x2\x1A\x1B\x5\x4\x3\x2\x1B\x1C\a\x2\x2\x3\x1C\x3");
		sb.Append("\x3\x2\x2\x2\x1D\x1F\x5\x6\x4\x2\x1E\x1D\x3\x2\x2\x2\x1F \x3");
		sb.Append("\x2\x2\x2 \x1E\x3\x2\x2\x2 !\x3\x2\x2\x2!\"\x3\x2\x2\x2\"#\x5");
		sb.Append("\x6\x4\x2#&\x3\x2\x2\x2$&\x5\x6\x4\x2%\x1E\x3\x2\x2\x2%$\x3");
		sb.Append("\x2\x2\x2&\x5\x3\x2\x2\x2\'*\x5\b\x5\x2(*\x5\f\a\x2)\'\x3\x2");
		sb.Append("\x2\x2)(\x3\x2\x2\x2*\a\x3\x2\x2\x2+,\a\x4\x2\x2,-\b\x5\x1\x2");
		sb.Append("-/\a\x5\x2\x2.\x30\x5\xE\b\x2/.\x3\x2\x2\x2/\x30\x3\x2\x2\x2");
		sb.Append("\x30\x31\x3\x2\x2\x2\x31\x32\a\x6\x2\x2\x32\x33\b\x5\x1\x2\x33");
		sb.Append("\x34\a\t\x2\x2\x34\x35\b\x5\x1\x2\x35\t\x3\x2\x2\x2\x36\x37");
		sb.Append("\a\x4\x2\x2\x37\x39\a\x5\x2\x2\x38:\x5\xE\b\x2\x39\x38\x3\x2");
		sb.Append("\x2\x2\x39:\x3\x2\x2\x2:;\x3\x2\x2\x2;<\a\x6\x2\x2<=\b\x6\x1");
		sb.Append("\x2=>\a\t\x2\x2>?\b\x6\x1\x2?\v\x3\x2\x2\x2@\x41\a\x4\x2\x2");
		sb.Append("\x41\x42\a\x4\x2\x2\x42\x43\b\a\x1\x2\x43\x45\a\x5\x2\x2\x44");
		sb.Append("\x46\x5\x10\t\x2\x45\x44\x3\x2\x2\x2\x45\x46\x3\x2\x2\x2\x46");
		sb.Append("G\x3\x2\x2\x2GH\a\x6\x2\x2HL\a\a\x2\x2IK\x5\n\x6\x2JI\x3\x2");
		sb.Append("\x2\x2KN\x3\x2\x2\x2LJ\x3\x2\x2\x2LM\x3\x2\x2\x2MO\x3\x2\x2");
		sb.Append("\x2NL\x3\x2\x2\x2OP\a\b\x2\x2P\r\x3\x2\x2\x2QR\x5\x14\v\x2R");
		sb.Append("S\a\n\x2\x2SU\x3\x2\x2\x2TQ\x3\x2\x2\x2UV\x3\x2\x2\x2VT\x3\x2");
		sb.Append("\x2\x2VW\x3\x2\x2\x2WX\x3\x2\x2\x2XY\x5\x14\v\x2Y\\\x3\x2\x2");
		sb.Append("\x2Z\\\x5\x14\v\x2[T\x3\x2\x2\x2[Z\x3\x2\x2\x2\\\xF\x3\x2\x2");
		sb.Append("\x2]^\x5\x12\n\x2^_\a\n\x2\x2_\x61\x3\x2\x2\x2`]\x3\x2\x2\x2");
		sb.Append("\x61\x62\x3\x2\x2\x2\x62`\x3\x2\x2\x2\x62\x63\x3\x2\x2\x2\x63");
		sb.Append("\x64\x3\x2\x2\x2\x64\x65\x5\x12\n\x2\x65h\x3\x2\x2\x2\x66h\x5");
		sb.Append("\x12\n\x2g`\x3\x2\x2\x2g\x66\x3\x2\x2\x2h\x11\x3\x2\x2\x2ij");
		sb.Append("\a\x4\x2\x2jk\a\x4\x2\x2k\x13\x3\x2\x2\x2lm\t\x2\x2\x2m\x15");
		sb.Append("\x3\x2\x2\x2ns\b\f\x1\x2op\f\x4\x2\x2pr\x5\x18\r\x2qo\x3\x2");
		sb.Append("\x2\x2ru\x3\x2\x2\x2sq\x3\x2\x2\x2st\x3\x2\x2\x2t\x17\x3\x2");
		sb.Append("\x2\x2us\x3\x2\x2\x2vw\x5\b\x5\x2w\x19\x3\x2\x2\x2\xE %)/\x39");
		sb.Append("\x45LV[\x62gs");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
